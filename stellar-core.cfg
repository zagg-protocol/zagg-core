# simple configuration for a standalone test "network"
# See https://github.com/stellar/stellar-core/blob/master/docs/stellar-core_example.cfg

## HTTP_PORT (integer) default 11626
# What port stellar-core listens for commands on.
HTTP_PORT=11626

## PUBLIC_HTTP_PORT (true or false) default false
# If false you only accept stellar commands from localhost.
# Do not set to true and expose the port to the open internet. This will allow
#  random people to run stellar commands on your server. (such as `stop`)
PUBLIC_HTTP_PORT=true

## RUN_STANDALONE (true or false) defaults to false
# This is a mode for testing. It prevents you from trying to connect
#  to other peers
RUN_STANDALONE=false

## LOG_FILE_PATH (string) default "stellar-core.log"
# Path to the file you want stellar-core to write its log to.
LOG_FILE_PATH="/tmp/stellar-core/node01/logs/node1.log"

## COMMANDS  (list of strings) default is empty
# List of commands to run on startup.
# Right now only setting log levels really makes sense.
COMMANDS=[
"ll?level=debug"
]

# Configure which network this instance should talk to
NETWORK_PASSPHRASE="Standalone Zagg Network ; Jan 2019"

## NODE_SEED (string) default random, regenerated each run.
# To generate a new, stable seed (and associated public key), run:
# `stellar-core --genseed`
# You only need to keep the seed from this; you can always recover the
# public key from the seed by running: `stellar-core --convertid <seed>`
# Secret seed: SDD47JLAVOFLQY2RH46GZLAKNA6ZMD4JY7IYEKTYEWJQIUQSK2VJZKQA
# Public: GA2OMVQU4O4CMB6QEPE57S32JW7SVOX2QLUBAU7M2CXN4MOWULA2BHIM
NODE_SEED="SDD47JLAVOFLQY2RH46GZLAKNA6ZMD4JY7IYEKTYEWJQIUQSK2VJZKQA zagg-node01"

## NODE_IS_VALIDATOR (boolean) default false.
# Only nodes that want to participate in SCP should set NODE_IS_VALIDATOR=true.
# Most instances should operate in observer mode with NODE_IS_VALIDATOR=false.
NODE_IS_VALIDATOR=true

# KNOWN_PEERS (list of strings) default is empty
# These are IP:port strings that this server will add to its DB of peers.
# It will try to connect to these when it is below TARGET_PEER_CONNECTIONS.
KNOWN_PEERS=[
  "localhost:11635"
  ]

## Bitcoin realted configs
# To run bitcoin in regtest mode. default is true
BITCOIN_REGTEST=true
# Specify the datadirectory for bitcoin. default is /home/$user/.bitcoin
BITCOIN_DATADIR="/home/vishswasb/zagg/node01/"
# Miner public key
BITCOIN_MINER_ADDRESS="2Mtznvnp8P6CnDH6BQyjFCbRTpMq2XHzV3D"
# Number of blocks to be generated: this parameter will be used at the time of --newdb
# Default value is 101
BITCOIN_MINER_BLOCKS=101


## DATABASE (string) default "sqlite3://:memory:"
# Sets the DB connection string for SOCI.
# Defaults to an in memory database.
# If using sqlite, a string like:
#
#   "sqlite3://path/to/dbname.db"
#
# alternatively, if using postgresql, a string like:
#
#   "postgresql://dbname=stellar user=xxxx password=yyyy host=10.0.x.y"
# Example: DATABASE="postgresql://dbname=stellar user=postgres password=password host=localhost"
# Example: DATABASE="sqlite3://dbs/stellar_node1.db"
DATABASE="postgresql://dbname=stellar_node01_db host=localhost user=stellar_node_user password=testdb"

## BUCKET_DIR_PATH (string) default "buckets"
# Stellar-core stores a duplicate copy of the ledger in the 
# form of flat XDR files called “buckets.” 
# These files are placed in a directory specified in the config file as BUCKET_DIR_PATH
# This will get written to a lot and will grow as the size of the ledger grows.
BUCKET_DIR_PATH = "/tmp/stellar-core/node01/buckets/"

PREFERRED_PEERS=["localhost:11635"]

## PREFERRED_PEERS_ONLY (boolean) default is false
# When set to true, this peer will only connect to PREFERRED_PEERS and will
# only accept connections from PREFERRED_PEERS or PREFERRED_PEER_KEYS
PREFERRED_PEERS_ONLY=true

## PEER_PORT (Integer) defaults to 11625
# The port other instances of stellar-core can connect to you on.
PEER_PORT=11625

## FAILURE_SAFETY (integer) default -1
# Most people should leave this to -1
# This is the maximum number of validator failures from your QUORUM_SET that
# you want to be able to tolerate.
# Typically, you will need at least 3f+1 nodes in your quorum set.
# If you don't have enough nodes in your quorum set to tolerate the level you
#  set here stellar-core won't run as a precaution.
# A value of -1 indicates to use (n-1)/3 (n being the number of nodes
#    and groups from the top level of your QUORUM_SET)
# A value of 0 is only allowed if UNSAFE_QUORUM is set
# Note: The value of 1 below is the maximum number derived from the value of
# QUORUM_SET in this configuration file
FAILURE_SAFETY=0


## UNSAFE_QUORUM (true or false) default false
# Most people should leave this to false.
# If set to true allows to specify a potentially unsafe quorum set.
# Otherwise it won't start if
#   a threshold % is set too low (threshold below 66% for the top level,
#       51% for other levels)
#   FAILURE_SAFETY at 0 or above the number of failures that can occur
# You might want to set this if you are running your own network and
#  aren't concerned with byzantine failures or if you fully understand how the
# quorum sets of other nodes relate to yours when it comes to
# quorum intersection.
UNSAFE_QUORUM=true

#The public keys of the Stellar testnet servers
[QUORUM_SET]
THRESHOLD_PERCENT=100
VALIDATORS=[
  "$zagg-node01",
  ]

## HISTORY
# * Stellar-core normally interacts with one or more “history archives,” 
#   which are configurable facilities for storing and retrieving flat files containing history checkpoints: bucket files and history logs. 
#
# * Used to specify where to fetch and store the history archives.
# * Fetching and storing history is kept as general as possible.
# * Any place you can save and load static files from should be usable by the
#   stellar-core history system.   s3, the file system, http, etc
#   stellar-core will call any external process you specify and will pass it the
#   name of the file to save or load.
# * Simply use template parameters `{0}` and `{1}` in place of the files being transmitted or retrieved.
# * You can specify multiple places to store and fetch from. stellar-core will
#   use multiple fetching locations as backup in case there is a failure fetching from one.
#
# Note: any archive you *put* to you must run `$ stellar-core --newhist <historyarchive>`
#       once before you start.
#       for example this config you would run: $ stellar-core --newhist local
# https://www.stellar.org/developers/stellar-core/software/admin.html#history-archives
[HISTORY.local]
get="cp /tmp/stellar-core/node01/history/vs/{0} {1}"
put="cp {0} /tmp/stellar-core/node01/history/vs/{1}"
mkdir="mkdir -p /tmp/stellar-core/node01/history/vs/{0}"

